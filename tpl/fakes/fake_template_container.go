// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/joefitzgerald/inductor/tpl"
)

type FakeTemplateContainer struct {
	FindTemplateStub        func(path string) tpl.Templater
	findTemplateMutex       sync.RWMutex
	findTemplateArgsForCall []struct {
		path string
	}
	findTemplateReturns struct {
		result1 tpl.Templater
	}
	ListTemplatesStub        func() []tpl.Templater
	listTemplatesMutex       sync.RWMutex
	listTemplatesArgsForCall []struct{}
	listTemplatesReturns     struct {
		result1 []tpl.Templater
	}
}

func (fake *FakeTemplateContainer) FindTemplate(path string) tpl.Templater {
	fake.findTemplateMutex.Lock()
	fake.findTemplateArgsForCall = append(fake.findTemplateArgsForCall, struct {
		path string
	}{path})
	fake.findTemplateMutex.Unlock()
	if fake.FindTemplateStub != nil {
		return fake.FindTemplateStub(path)
	} else {
		return fake.findTemplateReturns.result1
	}
}

func (fake *FakeTemplateContainer) FindTemplateCallCount() int {
	fake.findTemplateMutex.RLock()
	defer fake.findTemplateMutex.RUnlock()
	return len(fake.findTemplateArgsForCall)
}

func (fake *FakeTemplateContainer) FindTemplateArgsForCall(i int) string {
	fake.findTemplateMutex.RLock()
	defer fake.findTemplateMutex.RUnlock()
	return fake.findTemplateArgsForCall[i].path
}

func (fake *FakeTemplateContainer) FindTemplateReturns(result1 tpl.Templater) {
	fake.FindTemplateStub = nil
	fake.findTemplateReturns = struct {
		result1 tpl.Templater
	}{result1}
}

func (fake *FakeTemplateContainer) ListTemplates() []tpl.Templater {
	fake.listTemplatesMutex.Lock()
	fake.listTemplatesArgsForCall = append(fake.listTemplatesArgsForCall, struct{}{})
	fake.listTemplatesMutex.Unlock()
	if fake.ListTemplatesStub != nil {
		return fake.ListTemplatesStub()
	} else {
		return fake.listTemplatesReturns.result1
	}
}

func (fake *FakeTemplateContainer) ListTemplatesCallCount() int {
	fake.listTemplatesMutex.RLock()
	defer fake.listTemplatesMutex.RUnlock()
	return len(fake.listTemplatesArgsForCall)
}

func (fake *FakeTemplateContainer) ListTemplatesReturns(result1 []tpl.Templater) {
	fake.ListTemplatesStub = nil
	fake.listTemplatesReturns = struct {
		result1 []tpl.Templater
	}{result1}
}

var _ tpl.TemplateContainer = new(FakeTemplateContainer)
