// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/joefitzgerald/inductor/tpl"
)

type FakeTemplater struct {
	FullPathStub        func() string
	fullPathMutex       sync.RWMutex
	fullPathArgsForCall []struct{}
	fullPathReturns     struct {
		result1 string
	}
	BaseFilenameStub        func() string
	baseFilenameMutex       sync.RWMutex
	baseFilenameArgsForCall []struct{}
	baseFilenameReturns     struct {
		result1 string
	}
	ContentStub        func(buffer io.Writer) error
	contentMutex       sync.RWMutex
	contentArgsForCall []struct {
		buffer io.Writer
	}
	contentReturns struct {
		result1 error
	}
	FindTemplateStub        func(path string) tpl.Templater
	findTemplateMutex       sync.RWMutex
	findTemplateArgsForCall []struct {
		path string
	}
	findTemplateReturns struct {
		result1 tpl.Templater
	}
	ListTemplatesStub        func() []tpl.Templater
	listTemplatesMutex       sync.RWMutex
	listTemplatesArgsForCall []struct{}
	listTemplatesReturns     struct {
		result1 []tpl.Templater
	}
}

func (fake *FakeTemplater) FullPath() string {
	fake.fullPathMutex.Lock()
	fake.fullPathArgsForCall = append(fake.fullPathArgsForCall, struct{}{})
	fake.fullPathMutex.Unlock()
	if fake.FullPathStub != nil {
		return fake.FullPathStub()
	} else {
		return fake.fullPathReturns.result1
	}
}

func (fake *FakeTemplater) FullPathCallCount() int {
	fake.fullPathMutex.RLock()
	defer fake.fullPathMutex.RUnlock()
	return len(fake.fullPathArgsForCall)
}

func (fake *FakeTemplater) FullPathReturns(result1 string) {
	fake.FullPathStub = nil
	fake.fullPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTemplater) BaseFilename() string {
	fake.baseFilenameMutex.Lock()
	fake.baseFilenameArgsForCall = append(fake.baseFilenameArgsForCall, struct{}{})
	fake.baseFilenameMutex.Unlock()
	if fake.BaseFilenameStub != nil {
		return fake.BaseFilenameStub()
	} else {
		return fake.baseFilenameReturns.result1
	}
}

func (fake *FakeTemplater) BaseFilenameCallCount() int {
	fake.baseFilenameMutex.RLock()
	defer fake.baseFilenameMutex.RUnlock()
	return len(fake.baseFilenameArgsForCall)
}

func (fake *FakeTemplater) BaseFilenameReturns(result1 string) {
	fake.BaseFilenameStub = nil
	fake.baseFilenameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTemplater) Content(buffer io.Writer) error {
	fake.contentMutex.Lock()
	fake.contentArgsForCall = append(fake.contentArgsForCall, struct {
		buffer io.Writer
	}{buffer})
	fake.contentMutex.Unlock()
	if fake.ContentStub != nil {
		return fake.ContentStub(buffer)
	} else {
		return fake.contentReturns.result1
	}
}

func (fake *FakeTemplater) ContentCallCount() int {
	fake.contentMutex.RLock()
	defer fake.contentMutex.RUnlock()
	return len(fake.contentArgsForCall)
}

func (fake *FakeTemplater) ContentArgsForCall(i int) io.Writer {
	fake.contentMutex.RLock()
	defer fake.contentMutex.RUnlock()
	return fake.contentArgsForCall[i].buffer
}

func (fake *FakeTemplater) ContentReturns(result1 error) {
	fake.ContentStub = nil
	fake.contentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTemplater) FindTemplate(path string) tpl.Templater {
	fake.findTemplateMutex.Lock()
	fake.findTemplateArgsForCall = append(fake.findTemplateArgsForCall, struct {
		path string
	}{path})
	fake.findTemplateMutex.Unlock()
	if fake.FindTemplateStub != nil {
		return fake.FindTemplateStub(path)
	} else {
		return fake.findTemplateReturns.result1
	}
}

func (fake *FakeTemplater) FindTemplateCallCount() int {
	fake.findTemplateMutex.RLock()
	defer fake.findTemplateMutex.RUnlock()
	return len(fake.findTemplateArgsForCall)
}

func (fake *FakeTemplater) FindTemplateArgsForCall(i int) string {
	fake.findTemplateMutex.RLock()
	defer fake.findTemplateMutex.RUnlock()
	return fake.findTemplateArgsForCall[i].path
}

func (fake *FakeTemplater) FindTemplateReturns(result1 tpl.Templater) {
	fake.FindTemplateStub = nil
	fake.findTemplateReturns = struct {
		result1 tpl.Templater
	}{result1}
}

func (fake *FakeTemplater) ListTemplates() []tpl.Templater {
	fake.listTemplatesMutex.Lock()
	fake.listTemplatesArgsForCall = append(fake.listTemplatesArgsForCall, struct{}{})
	fake.listTemplatesMutex.Unlock()
	if fake.ListTemplatesStub != nil {
		return fake.ListTemplatesStub()
	} else {
		return fake.listTemplatesReturns.result1
	}
}

func (fake *FakeTemplater) ListTemplatesCallCount() int {
	fake.listTemplatesMutex.RLock()
	defer fake.listTemplatesMutex.RUnlock()
	return len(fake.listTemplatesArgsForCall)
}

func (fake *FakeTemplater) ListTemplatesReturns(result1 []tpl.Templater) {
	fake.ListTemplatesStub = nil
	fake.listTemplatesReturns = struct {
		result1 []tpl.Templater
	}{result1}
}

var _ tpl.Templater = new(FakeTemplater)
